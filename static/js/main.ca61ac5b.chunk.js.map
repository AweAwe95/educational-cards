{"version":3,"sources":["components/Header/Header.tsx","components/Footer/Footer.tsx","api/api.ts","redux/auth-reducer.ts","components/Main/Authorization/AuthorizationForm.tsx","components/Main/Authorization/Authorization.tsx","redux/reg-reducer.ts","components/Main/Registration/RegistrationForm/RegistrationForm.tsx","components/Main/Registration/Registration.tsx","components/Main/Profile/Profile.tsx","components/Main/PageNotFound/PageNotFound.tsx","redux/recPass-reducer.ts","components/Main/RecoveryPassword/RecoveryPasswordForm.tsx","components/Main/RecoveryPassword/RecoveryPassword.tsx","components/Main/NewPassword/NewPassword.tsx","App.tsx","reportWebVitals.ts","redux/profile-reducer.ts","redux/store.ts","index.tsx"],"names":["Header","className","to","Footer","instance","axios","create","baseURL","withCredentials","api","email","password","post","from","message","resetPasswordToken","data","then","res","initialState","isLoggedIn","AuthorizationForm","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","userData","type","loginAC","catch","e","error","response","console","log","handleSubmit","placeholder","getFieldProps","touched","style","color","Authorization","useSelector","state","auth","isRegistered","regError","regUserAC","setRegErrorAC","RegistrationForm","reg","finally","htmlFor","id","name","onChange","handleChange","value","onFocus","Registration","Profile","created","updated","PageNotFound","isPasRec","isPassRecReducerAC","RecoveryPasswordForm","token","recPass","recPassReducerTC","autoFocus","disabled","RecoveryPassword","NewPassword","isPassRec","serverToken","useParams","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","profile","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca61ac5b.chunk.js","sourcesContent":["import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport './Header.css'\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header-right\">\r\n                <NavLink to=\"/\">Profile</NavLink>\r\n                <NavLink to=\"/auth\">Authorization</NavLink>\r\n                <NavLink to=\"/signup\">Registration</NavLink>\r\n                <NavLink to=\"/password-recovery\">Password Recovery</NavLink>\r\n                <NavLink to=\"/new-password\">New Password</NavLink>\r\n                <NavLink to=\"/error-404\">Error 404</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './Footer.css'\r\nexport function Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>Footer</p>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\nimport { AuthFormikType } from \"../components/Main/Authorization/AuthorizationForm\";\r\n\r\nexport type LoginDataType = {\r\n    created: string\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    updated: string\r\n    verified: boolean\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const api = {\r\n    regUser(email: string, password: string) {\r\n        return instance.post('/auth/register', {email,password})\r\n    },\r\n    emailUser(email: string, from:string, message: string) {\r\n        return instance.post('/auth/forgot', {email, from, message})\r\n    },\r\n    resetUser(password: string, resetPasswordToken: string | undefined) {\r\n        return instance.post('/auth/set-new-password', {password, resetPasswordToken})\r\n    },\r\n    login(data: AuthFormikType) {\r\n        return instance.post<LoginDataType>('/auth/login', {...data})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    }\r\n}","import {AuthFormikType} from '../components/Main/Authorization/AuthorizationForm';\r\nimport {Dispatch} from 'redux';\r\nimport {LoginDataType, api} from '../api/api';\r\n\r\nconst initialState = {\r\n    // data: {\r\n    //     created: '',\r\n    //     email: '',\r\n    //     isAdmin: false,\r\n    //     name: '',\r\n    //     publicCardPacksCount: 0,\r\n    //     rememberMe: false,\r\n    //     token: '',\r\n    //     tokenDeathTime: 0,\r\n    //     updated: '',\r\n    //     verified: false,\r\n    //     __v: 0,\r\n    //     _id: '',\r\n    // },\r\n    data: {} as LoginDataType,\r\n    isLoggedIn: false,\r\n};\r\n\r\nexport const authReducer = (state: AuthStateType = initialState, action: ActionsType): AuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/LOGIN': {\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            };\r\n        }\r\n        case 'AUTH/IS-LOGGED-IN': {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport const loginAC = (data: LoginDataType) => {\r\n    return {\r\n        type: 'AUTH/LOGIN',\r\n        data\r\n    } as const\r\n};\r\n\r\nexport const isLoggedInAC = (isLoggedIn: boolean) => {\r\n    return {\r\n        type: 'AUTH/IS-LOGGED-IN',\r\n        isLoggedIn\r\n    } as const\r\n};\r\n\r\nexport const loginTC = (data: AuthFormikType) => {\r\n    return (dispatch: Dispatch) => {\r\n        api.login(data)\r\n            .then(userData => {\r\n                dispatch(loginAC(userData));\r\n                dispatch(isLoggedInAC(true))\r\n            })\r\n            .catch(e => {\r\n                // console.log('Error: ' + e.response.data.error || e.message);\r\n                const error = e.response.data.error\r\n                    ? e.response.data.error\r\n                    : (e.message + 'more details in console');\r\n                console.log('Error: ' + error);\r\n            });\r\n    };\r\n};\r\n\r\ntype AuthStateType = typeof initialState\r\ntype ActionsType = ReturnType<typeof loginAC> |\r\n    ReturnType<typeof isLoggedInAC>\r\n","import {useDispatch} from 'react-redux';\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from '../../../redux/auth-reducer';\r\n\r\nexport type AuthFormikType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const AuthorizationForm = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n            initialValues: {\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false,\r\n            },\r\n            validate: (values) => {\r\n                const errors: AuthFormikType = {};\r\n                if (!values.email) {\r\n                    errors.email = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                } else if (values.password.length <= 7) {\r\n                    errors.password = 'Password should contain more than 7 symbols';\r\n                }\r\n                return errors;\r\n            },\r\n            onSubmit: (values) => {\r\n                dispatch(loginTC(values));\r\n                // formik.resetForm();\r\n            }\r\n        }\r\n    );\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <input\r\n                    type=\"text\" placeholder={'Enter your email'} {...formik.getFieldProps('email')}/>\r\n                {formik.errors.email && formik.touched.email ?\r\n                    <span style={{color: 'red'}}>{formik.errors.email}</span> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <input type=\"password\" placeholder={'Enter your password'} {...formik.getFieldProps('password')}/>\r\n                {formik.errors.password && formik.touched.password ?\r\n                    <span style={{color: 'red'}}>{formik.errors.password}</span> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <input type=\"checkbox\"/>\r\n                <span>Remember me</span>\r\n            </div>\r\n            <button type={'submit'}>\r\n                Login\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n","import {AuthorizationForm} from './AuthorizationForm';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport function Authorization() {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AuthorizationForm/>\r\n        </div>\r\n    );\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {api} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    regError: false\r\n}\r\n\r\nexport const regReducer = (state: RegStateType = initialState, action: ActionsType): RegStateType => {\r\n    switch (action.type) {\r\n        case \"REG-USER\": {\r\n            return {...state, isRegistered: action.isRegistered}\r\n        }\r\n        case \"SET-REG-ERROR\": {\r\n            return {...state, regError: action.regError}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\ntype RegStateType = typeof initialState\r\ntype ActionsType =\r\n    | ReturnType<typeof regUserAC>\r\n    | ReturnType<typeof setRegErrorAC>\r\n\r\nexport const regUserAC = (isRegistered: boolean) => ({type: 'REG-USER', isRegistered} as const)\r\nexport const setRegErrorAC = (regError: boolean) => ({type: 'SET-REG-ERROR', regError} as const)\r\n\r\nexport const regUserTC = (email: string, password: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        api.regUser(email, password)\r\n            .then(() => dispatch(regUserAC(true)))\r\n            .catch(() => dispatch(setRegErrorAC(true)))\r\n            .finally(() => dispatch(regUserAC(false))\r\n            )\r\n    }\r\n}","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {regUserTC, setRegErrorAC} from \"../../../../redux/reg-reducer\";\r\nimport \"./RegistrationForm.css\"\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../../redux/store\";\r\n\r\nexport const RegistrationForm = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.reg.isRegistered)\r\n    const regError = useSelector<AppRootStateType, boolean>(state => state.reg.regError)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(regUserTC(values.email, values.password))\r\n        },\r\n    });\r\n    if (isRegistered) {\r\n        return <Navigate to={'/auth'}/>\r\n    }\r\n    return (\r\n        <div className=\"registerContainer\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <p className=\"registerText\">Please fill in this form to create an account.</p>\r\n                <label htmlFor=\"email\"><b>Email Address</b></label>\r\n                <input\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Email\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                    onFocus={()=>dispatch(setRegErrorAC(false))}\r\n                    className=\"registerInput\"\r\n\r\n                />\r\n                <label htmlFor=\"password\"><b>Password</b></label>\r\n                <input\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Enter Password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                    onFocus={()=>dispatch(setRegErrorAC(false))}\r\n                    className=\"registerInput\"\r\n                />\r\n\r\n                <button type=\"submit\" className=\"registerBtn\">Submit</button>\r\n            </form>\r\n            {regError && <h3 className={'regError'}>SOMETHING GOING WRONG</h3>}\r\n        </div>\r\n    );\r\n}\r\n;","import {RegistrationForm} from \"./RegistrationForm/RegistrationForm\";\r\nimport \"./Registration.css\"\r\nexport function Registration() {\r\n    return (\r\n        <div className={\"registrationContainer\"}>\r\n            <RegistrationForm/>\r\n        </div>\r\n    )\r\n}","import {useSelector} from 'react-redux';\r\nimport {LoginDataType} from '../../../api/api';\r\nimport {AppRootStateType} from '../../../redux/store';\r\n\r\nexport function Profile() {\r\n\r\n    const data = useSelector<AppRootStateType, LoginDataType>(state => state.auth.data);\r\n    console.log(data);\r\n\r\n    return (\r\n        <div>\r\n            <div>{data.name}</div>\r\n            <div>{data.created}</div>\r\n            <div>{data.updated}</div>\r\n        </div>\r\n    );\r\n}","export function PageNotFound() {\r\n    return (\r\n        <div>\r\n            PageNotFound\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {api} from \"../api/api\";\r\n\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    isPasRec: false,\r\n    from: \"ai73a@yandex.by\",\r\n    message: `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='http://localhost:3000/new-password/$token$'> link</a></div>`\r\n}\r\n\r\nexport const recPassReducer = (state: RecPassStateType = initialState, action: ActionsType): RecPassStateType => {\r\n    switch (action.type) {\r\n        case \"REC-PASS-REDUCER\": {\r\n            return {...state, email: action.email}\r\n        }\r\n        case \"IS-PASS-REC-REDUCER\": {\r\n            return {...state, isPasRec: action.isPasRec}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntype RecPassStateType = typeof initialState\r\ntype ActionsType = ReturnType<typeof recPassReducerAC> | ReturnType<typeof isPassRecReducerAC>\r\n\r\nexport const recPassReducerAC = (email: string) => ({type: \"REC-PASS-REDUCER\", email} as const)\r\nexport const isPassRecReducerAC = (isPasRec: boolean) => ({type: \"IS-PASS-REC-REDUCER\", isPasRec} as const)\r\n\r\n\r\nexport const recPassReducerTC = (email: string, from: string, message: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        api.emailUser(email, from, message)\r\n            .then()\r\n    }\r\n}\r\n\r\nexport const newPassReducerTC = (password: string, resetPasswordToken: string | undefined) => {\r\n    return (dispatch: Dispatch) => {\r\n        api.resetUser(password, resetPasswordToken)\r\n            .then((res) => {\r\n                dispatch(isPassRecReducerAC(true))\r\n            }).finally(() => dispatch(isPassRecReducerAC(false)))\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {recPassReducer, recPassReducerTC} from \"../../../redux/recPass-reducer\";\r\nimport {AuthFormikType} from \"../Authorization/AuthorizationForm\";\r\nimport {AppRootStateType} from \"../../../redux/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const RecoveryPasswordForm = () => {\r\n    const dispatch = useDispatch()\r\n    const token = useSelector<AppRootStateType, string>(state => state.auth.data.token)\r\n\r\n    const from = useSelector<AppRootStateType, string>(state => state.recPass.from)\r\n    const message = useSelector<AppRootStateType, string>(state => state.recPass.message)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            token: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: AuthFormikType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(recPassReducerTC(values.email, from, message))\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <label>Forgot your password?</label>\r\n                </div>\r\n                <input\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    className=\" \"\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                    placeholder=\"Type your Email\"\r\n                    autoFocus\r\n                />\r\n                {formik.errors.email && formik.touched.email ?\r\n                    <span style={{color: 'red'}}>{formik.errors.email}</span> : null}\r\n                <div>\r\n                    <button type=\"submit\" disabled={!formik.values.email}>Send instruction</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n    // const dispatch = useDispatch()\r\n    //\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         email: '',\r\n    //     },\r\n    //     onSubmit: values => {\r\n    //         dispatch(recPassReducerTC(values.email))\r\n    //\r\n    //     },\r\n    // });\r\n    // return (\r\n    //     <form onSubmit={formik.handleSubmit}>\r\n    //         <div>\r\n    //             <div>\r\n    //             <label>Forgot your password?</label>\r\n    //             </div>\r\n    //             <input\r\n    //                 id=\"email\"\r\n    //                 name=\"email\"\r\n    //\r\n    //             />\r\n    //             <div>\r\n    //                 <button type=\"submit\">Send instruction</button>\r\n    //             </div>\r\n    //         </div>\r\n    //     </form>\r\n    // );\r\n};","import {RecoveryPasswordForm} from \"./RecoveryPasswordForm\";\r\nexport function RecoveryPassword() {\r\n    return (\r\n        <div className={\"\"}>\r\n            <RecoveryPasswordForm/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {newPassReducerTC, recPassReducer, recPassReducerTC} from \"../../../redux/recPass-reducer\";\r\nimport {AuthFormikType} from \"../Authorization/AuthorizationForm\";\r\nimport {AppRootStateType} from \"../../../redux/store\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {log} from \"util\";\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    // const token = useSelector<AppRootStateType, string>(state => state.auth.data.token)\r\n    const isPassRec = useSelector<AppRootStateType, boolean>(state => state.recPass.isPasRec)\r\n    const from = useSelector<AppRootStateType, string>(state => state.recPass.from)\r\n    const message = useSelector<AppRootStateType, string>(state => state.recPass.message)\r\n    const params = useParams()\r\n    const serverToken = params.serverToken\r\n\r\n    console.log(serverToken)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            token: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(newPassReducerTC(values.password, serverToken))\r\n        },\r\n    });\r\n    if (isPassRec) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <label>Create new password</label>\r\n                </div>\r\n                <input\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    className=\" \"\r\n                    value={formik.values.password}\r\n                    onChange={formik.handleChange}\r\n                    placeholder=\"Type your Password\"\r\n                    autoFocus\r\n                />\r\n\r\n                <div>\r\n                    <button type=\"submit\" disabled={!formik.values.password}>Create new password</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {Footer} from \"./components/Footer/Footer\";\r\nimport {Authorization} from \"./components/Main/Authorization/Authorization\";\r\nimport {Registration} from \"./components/Main/Registration/Registration\";\r\nimport {Profile} from \"./components/Main/Profile/Profile\";\r\nimport {PageNotFound} from \"./components/Main/PageNotFound/PageNotFound\";\r\nimport {RecoveryPassword} from \"./components/Main/RecoveryPassword/RecoveryPassword\";\r\nimport {NewPassword} from \"./components/Main/NewPassword/NewPassword\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <div>\r\n                <Routes>\r\n                    <Route path={'*'} element={<PageNotFound/>}></Route>\r\n                    <Route path={'/auth'} element={<Authorization/>}></Route>\r\n                    <Route path={'/signup'} element={<Registration/>}></Route>\r\n                    <Route path={'/'} element={<Profile/>}></Route>\r\n                    <Route path={'/password-recovery'} element={<RecoveryPassword/>}></Route>\r\n                    <Route path={'/new-password/:serverToken'} element={<NewPassword/>}></Route>\r\n                </Routes>\r\n            </div>\r\n            <Footer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {}\r\n\r\nexport const profileReducer = (state: ProfileStateType = initialState, action: ActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n        case \"\": {\r\n            return state\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntype ProfileStateType = typeof initialState\r\ntype ActionsType = any\r\n","import {authReducer} from \"./auth-reducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {recPassReducer} from \"./recPass-reducer\";\r\nimport {regReducer} from \"./reg-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    profile: profileReducer,\r\n    recPass: recPassReducer,\r\n    reg: regReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './redux/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}